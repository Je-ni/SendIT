{"version":3,"sources":["../../server/controller/user.js"],"names":["User","create","req","res","valid","joi","validate","body","signup","status","json","error","password","username","exists","email","text","values","firstname","lastname","othernames","Date","db","query","rows","data","login","comparePassword","token","id","user","getAll","getUserparcels","params","placedby","userData","admin"],"mappings":"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","file":"user.js","sourcesContent":["/* eslint-disable no-trailing-spaces */\r\nimport uuidv4 from 'uuid/v4';\r\nimport db from './index';\r\nimport hash from '../middleware/passwordMiddleware';\r\nimport doesExist from '../middleware/doesExist';\r\nimport joi from '../joiSchema/user';\r\nimport { setToken } from '../middleware/accessToken';\r\n\r\nconst User = {\r\n  async create(req, res) {\r\n    // validate req.body\r\n    const valid = joi.validate(req.body, joi.signup);\r\n    if (valid) return res.status(422).json({ status: 422, error: valid });\r\n\r\n    const password = hash(req.body.password);\r\n    \r\n    try {\r\n      // check if username exists already\r\n      let exists = await doesExist('username', req.body.username);\r\n      if (exists) return res.status(409).json({ status: 409, error: 'Username already exists' });     \r\n      \r\n      // check if email exists already\r\n      exists = await doesExist('email', req.body.email);\r\n      if (exists) return res.status(409).json({ status: 409, error: 'Email already exists' }); \r\n      \r\n      // continue if not duplicates\r\n      const text = `INSERT INTO\r\n        users(id, firstname, lastname, othernames, password, email, username, registered, createddate, modifieddate)\r\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n        returning *`;\r\n      const values = [\r\n        uuidv4(),\r\n        req.body.firstname,\r\n        req.body.lastname,\r\n        req.body.othernames,\r\n        password,\r\n        req.body.email,\r\n        req.body.username,\r\n        new Date(),\r\n        new Date(),\r\n        new Date()\r\n      ];\r\n      try {\r\n        const { rows } = await db.query(text, values);\r\n        return res.status(201).json({ status: 201, data: rows });\r\n      } catch (error) {\r\n        return res.status(500).json({ status: 500, error });\r\n      }\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  async login(req, res) {\r\n    // validate req.body\r\n    const valid = joi.validate(req.body, joi.login);\r\n    if (valid) return res.status(422).json({ status: 422, error: valid });\r\n    \r\n    const comparePassword = hash(req.body.password);\r\n    const text = 'SELECT * FROM users WHERE email = $1 AND password = $2';\r\n    const values = [req.body.email, comparePassword];\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n      \r\n      if (!rows[0]) return res.status(401).json({ status: 401, error: 'Email/Password Incorrect' });\r\n      return res.status(200).json({\r\n        status: 500,\r\n        data: [{\r\n          token: setToken({ id: rows[0].id, email: rows[0].email }), \r\n          user: rows[0]\r\n        }]\r\n        \r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  async getAll(req, res) {\r\n    const text = 'SELECT * FROM users';\r\n    try {\r\n      const { rows } = await db.query(text, []);\r\n      return res.status(200).json({ status: 200, data: rows });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  //  GET /users/<userId>/parcels. Fetch all parcel delivery order by a specific user.\r\n  async getUserparcels(req, res) {\r\n    const text = 'SELECT * FROM parcels where placedby = $1';\r\n    try {\r\n      const { rows } = await db.query(text, [req.params.placedby]);\r\n      if (rows[0] && req.userData.id !== rows[0].placedby && !req.userData.admin) return res.status(401).json({ status: 401, error: 'user access denied' });\r\n      return res.status(200).json({ status: 200, data: rows });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  }\r\n};\r\n\r\nexport default User;\r\n"]}