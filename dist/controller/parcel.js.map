{"version":3,"sources":["../../server/controller/parcel.js"],"names":["text","Parcel","create","req","res","valid","joi","validate","body","status","json","error","values","userData","id","weight","weightmetric","Date","sentfrom","sentto","description","db","query","rows","data","message","getAll","getById","params","parcelId","admin","placedby","changeDestination","update","email","cancel","active","changeStatus","changeLocation","currentlocation"],"mappings":"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","file":"parcel.js","sourcesContent":["import uuidv4 from 'uuid/v4';\r\nimport db from './index';\r\nimport joi from '../joiSchema/parcel';\r\nimport mail from '../middleware/mailer';\r\n\r\nconst text = `SELECT p.id, p.placedby, p.weight, p.weightmetric, p.senton, p.deliveredon, p.status,\r\np.active, p.currentlocation, p.sentfrom, p.sentto, p.description, u.id as user, u.username, u.email \r\nFROM parcels p \r\nINNER JOIN users u\r\nON p.placedby = u.id \r\nWHERE p.id = $1`;\r\n\r\nconst Parcel = {\r\n  async create(req, res) {\r\n    const valid = joi.validate(req.body, joi.create);\r\n    if (valid) return res.status(422).json({ status: 422, error: valid });\r\n\r\n    try {\r\n      const text = `INSERT INTO\r\n      parcels(id, placedby, weight, weightmetric, senton, currentlocation, sentfrom, sentto, description)\r\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n      returning *`;\r\n      const values = [\r\n        uuidv4(),\r\n        req.userData.id,\r\n        req.body.weight,\r\n        req.body.weightmetric,\r\n        new Date(),\r\n        req.body.sentfrom, // at the time of sending, currentlocation == sentfrom\r\n        req.body.sentfrom,\r\n        req.body.sentto,\r\n        req.body.description\r\n      ];\r\n      try {\r\n        const { rows } = await db.query(text, values);\r\n        return res.status(201).json({\r\n          status: 201,\r\n          data: [{\r\n            id: rows[0].id,\r\n            message: 'Order created'\r\n          }]\r\n        });\r\n      } catch (error) {\r\n        return res.status(500).json({ status: 500, error });\r\n      }\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  async getAll(req, res) {\r\n    const text = `SELECT p.id, p.placedby, p.weight, p.weightmetric, p.senton, p.currentlocation, p.sentfrom, p.sentto, p.description,\r\n    u.username, u.email FROM parcels p \r\n    INNER JOIN users u\r\n    ON p.placedby = u.id `;\r\n    try {\r\n      const { rows } = await db.query(text, []);\r\n      return res.status(200).json({ status: 200, data: rows });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  async getById(req, res) {\r\n    try {\r\n      const { rows } = await db.query(text, [req.params.parcelId]);\r\n      if (!req.userData.admin && rows[0]) {\r\n        if (rows[0].placedby !== req.userData.id) return res.status(401).json({ status: 401, error: 'user access denied' });\r\n      }\r\n      return res.status(200).json({ status: 200, data: rows });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  async changeDestination(req, res) {\r\n    const update = 'UPDATE parcels SET sentto = $1 WHERE id = $2';\r\n    try {\r\n      await db.query(update, [req.body.sentto, req.params.parcelId]);\r\n      // fetch parcel with user email\r\n      const { rows } = await db.query(text, [req.params.parcelId]);\r\n      if (!rows[0]) return res.status(404).json({ status: 404, error: 'Parcel not found' });\r\n\r\n      // check if user id corresponds with placedby value\r\n      if (req.userData.id !== rows[0].placedby && !req.userData.admin) {\r\n        return res.status(401).json({ status: 401, error: 'user unauthorized' });\r\n      }\r\n      // check if parcel is yet to be delivered\r\n      if (rows[0].status === 'delivered') return res.status(409).json({ status: 409, error: 'action not allowed. Parcel already delivered' });\r\n      mail(rows[0].email, rows[0].id, 'Parcel Destination change', rows[0].sentto);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [{\r\n          id: rows[0].id,\r\n          sentto: rows[0].sentto,\r\n          message: 'Parcel destination changed'\r\n        }]\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  // PATCH  /parcels/<parcelId>/cancel. Cancel a specific parcel delivery order.\r\n  async cancel(req, res) {\r\n    const update = 'UPDATE parcels SET active = $1 WHERE id = $2';\r\n    try {\r\n      await db.query(update, [false, req.params.parcelId]);\r\n      // fetch parcel with user email\r\n      const { rows } = await db.query(text, [req.params.parcelId]);\r\n      if (!rows[0]) return res.status(404).json({ status: 404, error: 'Parcel not found' });\r\n\r\n      // check if user id corresponds with placedby value\r\n      if (req.userData.id !== rows[0].placedby && !req.userData.admin) {\r\n        return res.status(401).json({ status: 401, error: 'user unauthorized' });\r\n      }\r\n      // if (rows[0].active === 'false')\r\n      // return res.status(409).json({ status: 409, error: 'Parcel already cancelled' });\r\n      if (rows[0].status === 'delivered') return res.status(409).json({ status: 409, error: 'action not allowed. Parcel already delivered' });\r\n\r\n      mail(rows[0].email, rows[0].id, 'Parcel Order Cancellation', false);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [{\r\n          id: rows[0].id,\r\n          active: rows[0].active,\r\n          message: 'Parcel order cancelled'\r\n        }]\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  // PATCH  /parcels/<parcelId>/status. Change the status of a specific parcel delivery order.\r\n  // Only the Admin is allowed to access this endpoint.\r\n  // include user email in req.body\r\n  async changeStatus(req, res) {\r\n    const update = 'UPDATE parcels SET status = $1 WHERE id = $2';\r\n    try {\r\n      await db.query(update, [req.body.status, req.params.parcelId]);\r\n      // fetch parcel with user email\r\n      const { rows } = await db.query(text, [req.params.parcelId]);\r\n      if (!rows[0]) return res.status(404).json({ status: 404, error: 'parcel not found' });\r\n      mail(rows[0].email, rows[0].id, 'Parcel Status change', rows[0].status);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [{\r\n          id: rows[0].id,\r\n          status: rows[0].status,\r\n          message: 'Parcel Status Updated'\r\n        }]\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n  // PATCH  /parcels/<parcelId>/currentlocation.\r\n  // Change the present location of a specific parcel delivery order.\r\n  // Only the Admin is allowed to access this endpoint..\r\n  async changeLocation(req, res) {\r\n    const update = 'UPDATE parcels SET currentlocation = $1 WHERE id = $2';\r\n    try {\r\n      await db.query(update, [req.body.currentlocation, req.params.parcelId]);\r\n\r\n      const { rows } = await db.query(text, [req.params.parcelId]);\r\n      if (!rows[0]) return res.status(404).json({ status: 404, error: 'parcel not found' });\r\n\r\n      mail(rows[0].email, rows[0].id, 'Parcel Current Location change', rows[0].currentlocation);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [{\r\n          id: rows[0].id,\r\n          currentlocation: rows[0].currentlocation,\r\n          message: 'Parcel location updated'\r\n        }]\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Parcel;\r\n"]}