{"version":3,"sources":["../../server/controller/admin.js"],"names":["auth","Admin","login","req","res","valid","joi","validate","body","status","json","error","comparePassword","password","text","values","name","db","query","rows","data","token","setToken","id","admin","user"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,I;;;;;;2cAJZ;;;AAMA,IAAMC,QAAQ;AACNC,OADM;AAAA,wFACAC,GADA,EACKC,GADL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEV;AACMC,mBAHI,GAGIC,gBAAIC,QAAJ,CAAaJ,IAAIK,IAAjB,EAAuBF,gBAAIJ,KAA3B,CAHJ;;AAAA,mBAING,KAJM;AAAA;AAAA;AAAA;;AAAA,+CAIQD,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeE,OAAON,KAAtB,EAArB,CAJR;;AAAA;AAMJO,6BANI,GAMc,kCAAKT,IAAIK,IAAJ,CAASK,QAAd,CANd;AAOJC,kBAPI,GAOG,wDAPH;AAQJC,oBARI,GAQK,CAACZ,IAAIK,IAAJ,CAASQ,IAAV,EAAgBJ,eAAhB,CARL;AAAA;AAAA;AAAA,qBAUeK,gBAAGC,KAAH,CAASJ,IAAT,EAAeC,MAAf,CAVf;;AAAA;AAAA;AAUAI,kBAVA,SAUAA,IAVA;;AAAA,kBAYHA,KAAK,CAAL,CAZG;AAAA;AAAA;AAAA;;AAAA,+CAYaf,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeE,OAAO,yBAAtB,EAArB,CAZb;;AAAA;AAAA,+CAaDP,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,wBAAQ,GADkB;AAE1BW,sBAAM,CAAC;AACLC,yBAAOrB,KAAKsB,QAAL,CAAc,EAAEC,IAAIJ,KAAK,CAAL,EAAQI,EAAd,EAAkBC,OAAO,IAAzB,EAAd,CADF;AAELC,wBAAMN,KAAK,CAAL;AAFD,iBAAD;;AAFoB,eAArB,CAbC;;AAAA;AAAA;AAAA;AAAA,+CAsBDf,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeE,kBAAf,EAArB,CAtBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAd;;kBA2BeV,K","file":"admin.js","sourcesContent":["/* eslint-disable no-trailing-spaces */\r\nimport db from './index';\r\nimport hash from '../middleware/passwordMiddleware';\r\nimport joi from '../joiSchema/admin';\r\nimport * as auth from '../middleware/accessToken';\r\n\r\nconst Admin = {\r\n  async login(req, res) {\r\n    // validate req.body\r\n    const valid = joi.validate(req.body, joi.login);\r\n    if (valid) return res.status(422).json({ status: 422, error: valid });\r\n    \r\n    const comparePassword = hash(req.body.password);\r\n    const text = 'SELECT * FROM admins WHERE name = $1 AND password = $2';\r\n    const values = [req.body.name, comparePassword];\r\n    try {\r\n      const { rows } = await db.query(text, values);\r\n      \r\n      if (!rows[0]) return res.status(401).json({ status: 401, error: 'Name/Password Incorrect' });\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [{\r\n          token: auth.setToken({ id: rows[0].id, admin: true }), \r\n          user: rows[0]\r\n        }]\r\n        \r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error });\r\n    }\r\n  }\r\n};\r\n\r\nexport default Admin;\r\n"]}